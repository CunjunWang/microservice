一、服务的注册于发现：Eureka
1. @EnableEurekaServer，@EnableDiscoveryClient
   心跳检测，健康检查，负载均衡
   Eureka高可用
   分布式系统中，服务与注册中心最重要
2. 服务发现的两种方式：
    (1) 客户端发现：
        优点：简单直接，不需要代理介入，知道可用服务实际地址
        缺点：需要自己实现逻辑
        Eureka采用客户端发现
    (2)服务端发现：
        优点：由于代理介入，B和服务中心对A不可见
        Nginx，Zookeeper，Kubernetes，Dubbo采用服务端发现
3. 微服务的异构特点
    不用语言，不同类型数据库 怎么调用服务
    SpringCloud服务调用方式：
        - REST or RPC?
        - Eureka提供REST接口
        - Node.js的eureka-js-client

二、微服务中的服务拆分
1. 如何拆分？
    起点：现有架构的形态
    终点：慢慢进化
2. 康威定律和微服务
3. 微服务的特点：
    · 一系列微小的服务共同组成
    · 单独部署，跑在自己的进程里
    · 每个服务为独立的业务开发
    · 分布式管理
4. 服务拆分的扩展立方模型
    X轴 水平复制，通过负载均衡实现
    Y轴 功能解耦，不同模块分成不同服务
    Z轴 数据分区
    (1) 拆分功能：
        · 单一职责、松耦合、高内聚
        · 关注点分离 DDD (Domain Drive Design)
            - 按职责：服务分类
            - 按通用性：与业务无关的基础组件也可以划分出来
            - 按粒度级别：不要分的太小
    (2) 拆分数据
        · 先考虑业务功能，再考虑数据
        · 无状态服务：如果数据需要被多个服务共享才能满足请求，称为有状态服务
        · 每个微服务都有单独的数据存储 服务之间有隔离
        · 依据服务特点选择不同的数据库类型
        · 难点在确定边界
    针对边界设计API
    依据边界权衡数据冗余

三、订单服务逻辑过程
    api参数校验
    查询商品信息（调用商品服务）
    计算总价
    更新库存（调用商品服务）
    订单入库

四、应用间通信 HTTP vs RPC
1. Spring: HTTP Restful
    RestTemplate / Feign
    订单服务调用商品服务，商品服务可以作为服务端，订单服务作为客户端
2. Dubbo: RPC
3. 客户端负载均衡器：Ribbon
    - RestTemplate
    - Feign
    - Zuul
4. Ribbon
· 服务发现
· 服务选择规则
· 服务监听
· 主要组件：ServerList, IRule, ServerListFilter
过程: 先通过ServerList或许所有的可用服务列表
     然后通过ServerListFilter过滤掉一部分地址
     剩下的地址中IRule选择作为最终结果
     常用的Rule: 轮循RoundRobin, 随机RandomRule

五、统一配置中心
1. 为什么需要统一配置中心
    · 不方便维护
    · 配置内容安全与权限
    · 更新配置项目需重启
2. config-server
    非动态刷新：
    远端git -> config-server -> product
                             -> order
                    ^
                    |
                    v
                 本地git


    动态刷新：更改配置后，需要通知使用配置的服务来刷新
            用到消息队列(RabbitMQ)
            加入ConfigBus操作消息队列

                   消息队列(RabbitMQ)
                    
                    ^           ^
                    |           |
                    v           v
        /bus-refresh
    远端git -> config-server -> product
                             -> order
                    ^
                    |
                    v
                 本地git
    MQ: 缓存异步 
        Topic: 生产者的每个消息 消费者能拿到全量
        Queue: 在队列里 每个消息不可被重复取走

六、异步和消息
1. 异步
    客户端请求不会阻塞进程 服务端响应可以是非即时的
    常见形态：
        · 通知（一对一）
        · 请求/异步响应（一对一）
        · 消息（一对多）
2. MQ应用场景
    · 异步处理
    · 流量削峰
    · 日志处理（kafka用得多）
    · 应用解耦
3. Spring Cloud Stream
    Stream: 应用与消息之间的粘合
    
docker run -d --hostname my-rabbit -p 5672:5672 -p 15672:15672 rabbitmq:3.7.3-management
docker run -d --hostname my-redis -p 6379:6379 redis:4.0.8

七、服务网关 API-GATEWAY
1. 要素
    · 稳定性 高可用
    · 性能 并发性
    · 安全性
    · 扩展性
2. 常用网关方案
    · Nginx + Lua
    · Kong (基于 Nginx + Lua)
    · Tyk (基于 Go 语言)
    · Spring Cloud Zuul
3. Zuul的特点
    路由 + 过滤器 = Zuul  核心是一系列过滤器
4. Zuul四种过滤器API
    前置(Pre): 限流 鉴权 参数校验
    路由(Route)
    后置(Post): 统计 日志
    错误(Error)

    HttpRequest -> "pre" filters -> "routing" filters -> "post" filters -> HttpResponse
                        
                        |                |    ^                 ^
                        v                v    |                 |

                 "custom" filters     Origin Server      "error" filters
                                                       前三个出现异常 作统一处理
5. Zuul的高可用
    多个Zuul节点注册到server
    Nginx和Zuul混搭
6. Zuul的限流 放在pre种
    时机：放在请求被转发之前调用 限流早于鉴权
    常见：令牌桶限流 token bucket
    google guava服务有现成实现
7. Zuul的权限校验
    · 在前置过滤器中实现相关逻辑
    · 分布式Session VS OAuth2
8. Zuul跨域
    · 在被调用的类或方法上添加@CrossOrigin注解 (不好)
    · 在Zuul里增加CorsFilter过滤器

八、服务容错
1. 雪崩效应
    
        调用        调用
    A   --->   B   --->   C
        ^           ^
        |           |
        |           |
        |           |
        |    导致    |

       失败  <---   失败

    防雪崩机制：Spring Cloud Hystrix
    功能：
        · 服务降级
        · 依赖隔离
        · 服务熔断
        · 监控
2. 服务降级
    优先核心服务，非核心服务不可用或若可用
    通过HystrixCommand注解指定
    fallbackMethod（回退函数）时间具体降级逻辑
3. 依赖隔离
    · 线程池隔离
    · Hystrix自动实现依赖隔离
4. 服务熔断
    当某个服务单元发生故障，切断主逻辑调用 类似于电路断路器
    circuitBreaker.requestVolumeThreshold: 断路器最小请求数
    circuitBreaker.sleepWindowInMilliseconds: 休眠时间范围
        降级逻辑暂时成为主逻辑 这个时间过去后会变成半熔断状态重新向主逻辑发送一个请求
        如果请求成功则断路器关闭 请求失败则回到熔断状态
    circuitBreaker.errorThresholdPercentage: 断路器打开最小错误比例

九、服务追踪




























